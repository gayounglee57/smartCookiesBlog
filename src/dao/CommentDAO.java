package dao;

import com.mysql.jdbc.Statement;
import db.Database;
import dbObjects.Comment;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

/**
 * An object in charge of loading / saving {@link Comment} objects to / from a database.
 */
public class CommentDAO implements AutoCloseable {

    private final Connection conn;

    /**
     * Creates a new DAO with a {@link Connection} from the given {@link Database}.
     *
     * @param db the {@link Database} from which to establish a {@link Connection}
     * @throws SQLException if something went wrong.
     */
    public CommentDAO(Database db) throws SQLException {
        this.conn = db.getConnection();
    }

    /**
     * Gets a list of {@link Comment}s from the database.
     *
     * @return a {@link List} of {@link Comment} objects
     * @throws SQLException if something went wrong.
     */
    public List<Comment> getAllComments() throws SQLException {

        try (PreparedStatement stmt = conn.prepareStatement("SELECT * FROM Comments")) {
            try (ResultSet rs = stmt.executeQuery()) {
                List<Comment> Comments = new ArrayList<>();
                while (rs.next()) {
                    Comments.add(CommentFromResultSet(rs));
                }
                return Comments;
            }
        }
    }

    /**
     * Gets the {@link Comment} with the given id from the database.
     *
     * @param articleid the id to check
     * @return the {@link Comment} with the given id, or <code>null</code> if none exists.
     * @throws SQLException if something went wrong.
     */
    public List<Comment> getCommentsByArticleId(String articleid) throws SQLException {
        List<Comment> comments = new ArrayList<>();
        try (PreparedStatement stmt = conn.prepareStatement("SELECT * FROM cookies_comments WHERE articleID = ? AND hide != 1 ")) {
            stmt.setInt(1, Integer.parseInt(articleid));
            try (ResultSet rs = stmt.executeQuery()) {
                while (rs.next()) {
                    comments.add(CommentFromResultSet(rs));
                }
            }
            return comments;
        }
    }
    public List<Comment> getCommentsForAdmin(String articleid) throws SQLException {
        List<Comment> comments = new ArrayList<>();
        try (PreparedStatement stmt = conn.prepareStatement("SELECT * FROM cookies_comments WHERE articleID = ?")) {
            stmt.setInt(1, Integer.parseInt(articleid));
            try (ResultSet rs = stmt.executeQuery()) {
                while (rs.next()) {
                    comments.add(CommentFromResultSet(rs));
                }
            }
            return comments;
        }
    }

    /**
     * Creates an {@link Comment} from a {@link ResultSet} at its current cursor location.
     *
     * @param rs the {@link ResultSet}
     * @return the {@link Comment}
     * @throws SQLException if something went wrong.
     */
    private Comment CommentFromResultSet(ResultSet rs) throws SQLException {
        return new Comment(rs.getInt(1), rs.getInt(2), rs.getString(3), rs.getString(4), rs.getTimestamp(5),rs.getBoolean(6),rs.getInt(7),rs.getInt(8));
    }



    /**
     * Adds the given {@link Comment} to the database.
     * <p>If the Comment's id is <code>null</code>, its id will be auto-generated by the database and set back to
     * the given {@link Comment} object. Otherwise, the given id will be used.</p>
     *
     * @param Comment the Comment to add
     * @throws SQLException if something went wrong.
     */
    public void addComment(Comment Comment) throws SQLException {
            addComment_generateId(Comment);
    }


    /**
        returns the id of the most recent comment
     */
    public int getMaxID() throws SQLException{
        try (PreparedStatement statement = conn.prepareStatement("select max(commentID) from cookies_comments;")){
            try (ResultSet rs =  statement.executeQuery()) {
                rs.next();
                return rs.getInt(1);
            }
        }
    }

    /**
     * Adds the given {@link Comment} to the database.
     * <p>Ignores any id value supplied, and uses the database to generate one. Then, sets the id of the given Comment
     * to the generated value.</p>
     *
     * @param Comment the Comment to add
     * @throws SQLException if something went wrong.
     */
    private void addComment_generateId(Comment Comment) throws SQLException {
        try (PreparedStatement stmt = conn.prepareStatement("INSERT INTO cookies_comments (articleID, uname,content,date,hide,parentComment,childComment) VALUES (?,?,?,?,0,?,?)",Statement.RETURN_GENERATED_KEYS)) {
            stmt.setInt(1, Comment.getArticleId());
            stmt.setString(2, Comment.getUserName());
            stmt.setString(3, Comment.getComment());
            stmt.setTimestamp(4, Comment.getDateTime());
            stmt.setInt(5, Comment.getParentId());
            stmt.setInt(6,Comment.getChildId());
            stmt.executeUpdate();
            try (ResultSet rs = stmt.getGeneratedKeys()) {
                rs.next();
                Comment.setId(rs.getInt(1));
            }
        }
    }


    /**
     * Updates the given {@link Comment}'s entry in the database.
     *
     * @param commentId the Comment to update
     * @throws SQLException if something went wrong.
     */
    public void updateComment(int commentId, String content) throws SQLException {
        try (PreparedStatement stmt = conn.prepareStatement("UPDATE cookies_comments SET content = ? WHERE commentID = ?")) {
            stmt.setString(1, content);
            stmt.setInt(2, commentId);
            stmt.executeUpdate();
        }
    }
    public void showComment (int id, Boolean show) throws SQLException {
        try (PreparedStatement stmt = conn.prepareStatement("UPDATE cookies_comments SET hide = ? WHERE commentID = ?")) {
            stmt.setBoolean(1, show);
            stmt.setInt(2, id);
            stmt.executeUpdate();
        }
    }

    /**
     * When deleting user set the user name of any of their comment to anonymous
     * @param uname the user name to set to anonymous
     * @throws SQLException if something went wrong.
     */
    public void commentAuthorToAnonymous (String uname) throws SQLException {
        try (PreparedStatement stmt = conn.prepareStatement("UPDATE cookies_comments SET uname = 'anonymous' WHERE uname = ?")) {
            stmt.setString(1, uname);
            stmt.executeUpdate();
        }
    }

    /**
     * Deletes the Comment with the given id from the database, if any.
     *
     * @param id the id to check
     * @throws SQLException if something went wrong.
     */
    public void deleteComment(int id) throws SQLException {
        try (PreparedStatement stmt = conn.prepareStatement("DELETE FROM cookies_comments WHERE commentID = ?")) {
            stmt.setInt(1, id);
            stmt.executeUpdate();
        }
    }

    /**
     * Closes the {@link Connection} that was created when this DAO was created.
     *
     * @throws SQLException if something went wrong.
     */
    @Override
    public void close() throws SQLException {
        this.conn.close();
    }
}
